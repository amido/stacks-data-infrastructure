# Define the parameters that this template uses
parameters:
  - name: agent_pool_name
    type: string
  - name: use_agent_pool
    type: boolean
    default: false

stages:
  - stage: Infrastructure
    dependsOn:
      - Networking

    variables:
      - template: variables.yml
        # Include the networking group that created in the previous stage
      - group: ${{ variables.company }}-${{ variables.project }}-${{ variables.domain }}-networking-${{ variables.ENV_NAME }}
      - name: STAGE
        value: infra
      - name: TF_FILE_LOCATION
        value: /workspace/.taskctl/deploy/terraform/infra

    pool:
      # Set the correct pool or build image based on the outputs from the networking stage
      # ${{ if eq(variables.ado_agent_pool_name, '') }}:
      #  vmImage: "ubuntu-latest"
      #${{ if ne(variables.ado_agent_pool_name, '') }}:
      #  name: $(ado_agent_pool_name)

      ${{ if eq(parameters.use_agent_pool, true) }}:
        name: ${{ parameters.agent_pool_name }}
      ${{ else }}:
        vmImage: "ubuntu-latest"

    jobs:
      - job: Deploy

        steps:
          # Download the pipeline artifacts from the previous stage as this contains
          # the tfvars file that is needed to pass in the values for the deployment
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: networking
              targetPath: $(Agent.TempDirectory)/networking

          - template: templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Initialise Terraform"
            inputs:
              targetType: inline
              script: |
                taskctl infra:init
            env:
              TF_BACKEND_INIT: "key=$(company)-$(project)-$(domain)-infra,storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg),container_name=$(tf_state_container)"

          # Copy the tfvars file from the downloaded artifact to the deployment directory
          - task: CopyFiles@2
            displayName: "Copy Terraform Variables file"
            inputs:
              SourceFolder: $(Agent.TempDirectory)/networking/
              Contents: "$(env_name)-networking-inputs.auto.tfvars"
              TargetFolder: $(Build.SourcesDirectory)/deploy/terraform/infra

          - task: Bash@3
            displayName: "TaskCTL: Plan Infrastructure"
            inputs:
              targetType: inline
              script: |
                taskctl infra:plan
            env:
              TF_VAR_name_company: $(company)
              TF_VAR_name_project: $(project)
              TF_VAR_ado_org_url: $(ado_org_url)
              TF_VAR_ado_project_id: $(ado_project_id)

          - task: Bash@3
            displayName: "TaskCTL: Apply Infrastructure"
            inputs:
              targetType: inline
              script: |
                taskctl infra:apply

          # Upload the outputs to the as artifacts
          - task: CopyFiles@2
            displayName: Copy stage output files to staging area
            inputs:
              flattenFolders: true
              contents: $(Build.SourcesDirectory)/outputs/terraform/*infra*
              targetFolder: $(Build.ArtifactStagingDirectory)/infra

          # Upload all files as artifacts of the build
          # Some will be used in subsequent stages
          - task: PublishPipelineArtifact@1
            displayName: Upload Generated Files
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/infra
              artifact: infra
