name: "$(Build.SourceBranchName)-init"

parameters:
  - name: destroy
    displayName: Destroy Environment
    type: boolean
    default: false

  - name: deploy
    displayName: Deploy Environment
    type: boolean
    default: true

  - name: env_name
    displayName: Environment Name
    default: dev
    values:
      - dev
      - qa
      - uat
      - prod
    type: string

  - name: pipeline_definition_id
    displayName: Infra Pipeline Definition ID
    type: string
    default: "111"

variables:
  - name: CLOUD_PLATFORM
    value: azure
  - name: ENV_NAME
    value: ${{ parameters.env_name }}

# Define the stages of the infra deployment pipeline
stages:
  - stage: Infrastructure

    variables:
      - template: variables.yml
        # Include the networking group that created in the previous stage
      - group: ${{ variables.company }}-${{ variables.project }}-${{ variables.domain }}-networking-${{ variables.ENV_NAME }}
      - name: STAGE
        value: databricks
      - name: TF_FILE_LOCATION
        value: /workspace/.taskctl/deploy/terraform/databricks

    pool:
      name: $(ado_agent_pool_name)

    jobs:
      - job: Deploy
        workspace:
          clean: all

        steps:
          # Checkout self repo
          - checkout: self

          # Download the pipeline artifacts from the previous stage as this contains
          # the tfvars file that is needed to pass in the values for the deployment
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: specific
              project: $(System.TeamProject)
              definition: ${{ parameters.pipeline_definition_id }}
              buildVersionToDownload: latest
              branchName: $(Build.SourceBranchName)
              artifactName: infra
              targetPath: $(Agent.TempDirectory)/infra

          - template: templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Initialise Terraform"
            inputs:
              targetType: inline
              script: |
                export USER_ID=`id -u`
                export USER_GROUP_ID=`id -g`
                taskctl -d infra:init
            env:
              TF_BACKEND_INIT: "key=$(company)-$(project)-$(domain)-databricks,storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg),container_name=$(tf_state_container)"

          # Copy the tfvars file from the downloaded artifact to the deployment directory
          - task: CopyFiles@2
            displayName: "Copy Terraform Variables file"
            inputs:
              SourceFolder: $(Agent.TempDirectory)/infra/
              Contents: "$(env_name)-infra-inputs.auto.tfvars"
              TargetFolder: $(Build.SourcesDirectory)/deploy/terraform/databricks

          # If the parameter has been set, destroy the environment
          - ${{ if eq(parameters.destroy, true) }}:
              - task: Bash@3
                displayName: "TaskCTL: [DESTROY] Plan Infrastructure"
                inputs:
                  targetType: inline
                  script: |
                    taskctl infra:destroy:plan
                env:
                  TF_VAR_name_company: $(company)
                  TF_VAR_name_project: $(project)
                  TF_VAR_ado_org_url: $(ado_org_url)
                  TF_VAR_ado_project_id: $(ado_project_id)

              - task: Bash@3
                displayName: "TaskCTL: [DESTROY] Apply Infrastructure"
                inputs:
                  targetType: inline
                  script: |
                    taskctl infra:destroy:apply

          - ${{ if eq(parameters.deploy, true) }}:
              - task: Bash@3
                displayName: "TaskCTL: Plan Infrastructure"
                inputs:
                  targetType: inline
                  script: |
                    taskctl -d infra:plan
                env:
                  TF_VAR_name_company: $(company)
                  TF_VAR_name_project: $(project)
                  TF_VAR_ado_org_url: $(ado_org_url)
                  TF_VAR_ado_project_id: $(ado_project_id)

              - task: Bash@3
                displayName: "TaskCTL: Apply Infrastructure"
                inputs:
                  targetType: inline
                  script: |
                    export USER_ID=`id -u`
                    export USER_GROUP_ID=`id -g`
                    taskctl infra:apply
