name: "$(Build.SourceBranchName)-init"

parameters:
  - name: deploy
    displayName: Deploy Environment
    type: boolean
    default: true

  - name: env_name
    displayName: Environment Name
    default: dev
    values:
      - dev
      - qa
      - uat
      - prod
    type: string

variables:
  - name: CLOUD_PLATFORM
    value: azure
  - name: ENV_NAME
    value: ${{ parameters.env_name }}

# Define the stages of the infrastructure deployment pipeline
stages:
  # Iterate around each of the defined stages that need to be run

  - stage: Networking
    variables:
      - template: variables.yml
      - name: STAGE
        value: networking
      - name: TF_FILE_LOCATION
        value: /workspace/.taskctl/deploy/terraform/networking

    jobs:
      - job: Deploy
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - template: templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Terraform inputs file"
            inputs:
              targetType: inline
              script: |
                taskctl infra:vars
            env:
              TF_VAR_name_company: $(company)
              TF_VAR_name_project: $(project)
              TF_VAR_enable_private_networks: $(enable_private_networks)
              TF_VAR_resource_group_location: $(region)
              TF_VAR_ado_create_agent_pool: $(ado_create_agent_pool)
              TF_VAR_ado_create_variable_group: $(ado_create_variable_group)
              TF_VAR_ado_org_url: $(ado_org_url)
              TF_VAR_ado_project_id: $(ado_project_id)

          # Copy tfvars file to staging area for upload at end of run
          - task: CopyFiles@2
            displayName: "Copy tfvars to artifact staging area"
            inputs:
              FlattenFolders: true
              Contents: $(Build.SourcesDirectory)/deploy/terraform/networking/*.tfvars
              targetFolder: $(Build.ArtifactStagingDirectory)/networking

          - task: Bash@3
            displayName: "TaskCTL: Initialise Terraform"
            inputs:
              targetType: inline
              script: |
                taskctl infra:init
            env:
              TF_BACKEND_INIT: "key=$(company)-$(project)-$(domain)-networking,storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg),container_name=$(tf_state_container)"

          - task: Bash@3
            displayName: "TaskCTL: Plan Infrastructure"
            inputs:
              targetType: inline
              script: |
                taskctl infra:plan

          - task: Bash@3
            displayName: "TaskCTL: Apply Infrastructure"
            inputs:
              targetType: inline
              script: |
                taskctl infra:apply

          # Upload the outputs to the as artifacts
          - task: CopyFiles@2
            displayName: Copy stage output files to staging area
            inputs:
              flattenFolders: true
              contents: $(Build.SourcesDirectory)/outputs/terraform/*networking*
              targetFolder: $(Build.ArtifactStagingDirectory)/networking

          # Upload all files as artifacts of the build
          # Some will be used in subsequent stages
          - task: PublishPipelineArtifact@1
            displayName: Upload Generated Files
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/networking
              artifact: networking

  - stage: Infrastructure
    dependsOn:
      - Networking

    variables:
      - template: variables.yml
      - name: STAGE
        value: infra
      - name: TF_FILE_LOCATION
        value: /workspace/.taskctl/deploy/terraform/infra

    jobs:
      - job: Deploy
        pool:
          vmImage: "ubuntu-latest"

        steps:
          # Download the pipeline artifacts from the previous stage as this contains
          # the tfvars file that is needed to pass in the values for the deployment
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: networking
              targetPath: $(Agent.TempDirectory)/networking

          # Copy the tfvars file from the previous stage to TF_FILE_LOCATION
          - task: CopyFiles@2
            displayName: "Copy Terraform Variables file"
            inputs:
              SourceFolder: $(Agent.TempDirectory)/networking/
              Contents: "$(env_name)-networking-inputs.auto.tfvars"
              TargetFolder: $(Build.SourcesDirectory)/deploy/terraform/infra

          - template: templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Initialise Terraform"
            inputs:
              targetType: inline
              script: |
                taskctl infra:init
            env:
              TF_BACKEND_INIT: "key=$(company)-$(project)-$(domain)-infra,storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg),container_name=$(tf_state_container)"

          - task: Bash@3
            inputs:
              targetType: inline
              script: |
                ls -l $(Build.SourcesDirectory)/deploy/terraform/infra

          - task: Bash@3
            displayName: "TaskCTL: Plan Infrastructure"
            inputs:
              targetType: inline
              script: |
                taskctl infra:plan
            env:
              TF_LOG: trace
              TF_VAR_name_company: $(company)
              TF_VAR_name_project: $(project)
              TF_VAR_ado_org_url: $(ado_org_url)
              TF_VAR_ado_project_id: $(ado_project_id)

          - task: Bash@3
            displayName: "TaskCTL: Apply Infrastructure"
            inputs:
              targetType: inline
              script: |
                taskctl infra:apply

          # Upload the outputs to the as artifacts
          - task: CopyFiles@2
            displayName: Copy stage output files to staging area
            inputs:
              flattenFolders: true
              contents: $(Build.SourcesDirectory)/outputs/terraform/*infra*
              targetFolder: $(Build.ArtifactStagingDirectory)/infra

          # Upload all files as artifacts of the build
          # Some will be used in subsequent stages
          - task: PublishPipelineArtifact@1
            displayName: Upload Generated Files
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/infra
              artifact: infra
